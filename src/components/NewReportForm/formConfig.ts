/* import i18n from "../../localization/i18n"; */
import { Report, ReportStatus } from "./types";
import * as Yup from "yup";

export const reportInitialValues: Report = {
  id: 0,
  reviewersEmail: [],
  segment: "",
  office: "",
  machineNumber: "",
  timestampCraftsmanship: null,
  hoursDelay: "",
  techBucket: "",
  machineFamily: "",
  description: "",
  mealTime: false,
  continuousWork: false,
  experienced: false,
  gotTraining: false,
  customerInterference: false,
  workAlone: false,
  background: "",
  myselInfluence: "",
  riskReduceDescription: "",
  teamInfluence: "",
  managerInfluence: "",
  status: ReportStatus.NEW,
  archived: false,
  permissions: {
    CanSubmit: false,
    CanUnsubmit: false,
    CanReview: false,
    CanEdit: false,
    CanClose: false,
    CanDelete: false,
    CanEditClose: false,
    CanAlwaysDelete: false,
  },
  answers: [],
  reportNumber: "",
  submitterEmail: "",
  filePath: null,
  filePathSecond: null,
  filePathThird: null,
  downloadFileURL: null,
  downloadFileUrlSecond: null,
  downloadFileUrlThird: null,
};

export const reportValidationSchema = Yup.object().shape({
  id: Yup.number(),
  reviewersEmail: Yup.array() /* .of(
    Yup.string().email(i18n.t("errorValidation.invalidEmail"))
  ), */,
  segment: Yup.string(),
  office: Yup.string(),
  machineNumber: Yup.string(),
  timestampCraftsmanship: Yup.string().nullable(),
  hoursDelay: Yup.string(),
  techBucket: Yup.string(),
  machineFamily: Yup.string(),
  description: Yup.string(),
  mealTime: Yup.string(),
  continuousWork: Yup.string(),
  experienced: Yup.string(),
  gotTraining: Yup.string(),
  customerInterference: Yup.string(),
  workAlone: Yup.string(),
  background: Yup.string(),
  myselInfluence: Yup.string(),
  riskReduceDescription: Yup.string(),
  teamInfluence: Yup.string(),
  managerInfluence: Yup.string(),
  status: Yup.string(),
  archived: Yup.boolean(),
  permissions: Yup.object().shape({
    CanSubmit: Yup.boolean(),
    CanUnsubmit: Yup.boolean(),
    CanReview: Yup.boolean(),
    CanEdit: Yup.boolean(),
    CanClose: Yup.boolean(),
    CanDelete: Yup.boolean(),
    CanEditClose: Yup.boolean(),
    CanAlwaysDelete: Yup.boolean(),
  }),
  answers: Yup.array().of(
    Yup.object().shape({
      id: Yup.number(),
      questionNumber: Yup.number(),
      reportId: Yup.number(),
      answer: Yup.string(),
      updateNumber: Yup.number(),
    })
  ),
});
